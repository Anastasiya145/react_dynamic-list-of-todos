{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/FilterTypes.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","todoId","handleClick","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","valueInput","filterType","onChangeInput","onChangeFilterType","value","onChange","ev","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SortType","getTodos","getUser","userId","TodoModal","selectedTodo","useState","user","setUser","a","reponse","useEffect","LoadUser","href","email","name","App","setTodos","todosLoaded","setTodosLoaded","setSelectedTodo","query","setQuery","All","setFilterType","LoadTodos","visibleTodos","useMemo","input","filteredByFilter","filter","Active","Completed","visibleGoods","toLocaleLowerCase","includes","toLowerCase","trim","getFilteredGoods","str","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7cacf52.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\nexport type Props = {\n  todos: Todo[],\n  todoId: number | null,\n  handleClick(id: number): void,\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, todoId, handleClick }) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n            className={classNames(\n              { 'has-background-info-light': todo.id === todoId },\n            )}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              {todo.completed ? (\n                <p className=\"has-text-success\">\n                  {todo.title}\n                </p>\n              ) : (\n                <p className=\"has-text-danger\">\n                  {todo.title}\n                </p>\n              )}\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleClick(todo.id)}\n              >\n                <span className=\"icon\">\n                  <i className=\"far fa-eye\" />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { SortType } from '../../types/FilterTypes';\n\nexport type Props = {\n  valueInput: string,\n  filterType: SortType,\n  onChangeInput(str: string): void,\n  onChangeFilterType(filterType: string): void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  valueInput,\n  filterType,\n  onChangeInput,\n  onChangeFilterType,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterType}\n          onChange={(ev) => onChangeFilterType(ev.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={valueInput}\n        onChange={(ev) => onChangeInput(ev.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {valueInput && (\n        /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onChangeInput('')}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum SortType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React, { useEffect, useState } from 'react';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\n\nexport type Props = {\n  handleClick(id: number | null): void,\n  selectedTodo: Todo,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  handleClick,\n  selectedTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  async function LoadUser() {\n    const reponse = await getUser(selectedTodo.userId);\n\n    setUser(reponse);\n  }\n\n  useEffect(() => {\n    LoadUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => handleClick(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">\n                  Done\n                </strong>\n              ) : (\n                <strong className=\"has-text-danger\">\n                  Planned\n                </strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { SortType } from './types/FilterTypes';\n\ntype ReorderOptions = {\n  filterType: SortType,\n  query: string,\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todosLoaded, setTodosLoaded] = useState(true);\n\n  const [selectedTodo, setSelectedTodo] = useState<number | null>(null);\n\n  const [query, setQuery] = useState('');\n  const [filterType, setFilterType] = useState(SortType.All);\n\n  async function LoadTodos() {\n    const reponse = await getTodos();\n\n    setTodosLoaded(false);\n\n    setTodos(reponse);\n  }\n\n  useEffect(() => {\n    LoadTodos();\n  }, []);\n\n  const onChangeFilterType = (type: SortType) => {\n    setFilterType(type);\n  };\n\n  function getFilteredGoods({ filterType: type, query: input }: ReorderOptions) {\n    const filteredByFilter = [...todos].filter(todo => {\n      switch (type) {\n        case SortType.Active:\n          return todo.completed === false;\n\n        case SortType.Completed:\n          return todo.completed === true;\n\n        default:\n          return todo;\n      }\n    });\n\n    let visibleGoods = filteredByFilter;\n\n    if (input) {\n      visibleGoods = filteredByFilter.filter(todo => todo\n        .title.toLocaleLowerCase().includes(query.toLowerCase().trim()));\n    }\n\n    return visibleGoods;\n  }\n\n  const visibleTodos = useMemo(() => {\n    return getFilteredGoods({ filterType, query });\n  }, [filterType, query, todos]);\n\n  const handleClick = (id: number | null) => {\n    setSelectedTodo(id);\n  };\n\n  const onChangeInput = (str: string) => {\n    setQuery(str);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                valueInput={query}\n                filterType={filterType}\n                onChangeInput={onChangeInput}\n                onChangeFilterType={onChangeFilterType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todosLoaded\n                ? (<Loader />)\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    todoId={selectedTodo}\n                    handleClick={handleClick}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          handleClick={handleClick}\n          selectedTodo={visibleTodos[selectedTodo - 1]}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}